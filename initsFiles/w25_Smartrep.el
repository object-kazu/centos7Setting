(use-package smartrep)

;; (smartrep-define-key
;;     global-map "C-x"
;;   '(
;;     ;;  ("a" . 'beginning-of-defun)
;;     ;;  ("b" . 'paredit-backward)
;;     ;;  ;("c" . 'next-line)
;;     ;;  ("d" . 'paredit-forward-down)
;;     ;;  ("e" . 'seq-end)
;;     ;;  ("f" . 'paredit-forward)
;;     ("g" . 'goto-last-change)
;;     ;;  ;("h" . 'next-line)
;;     ;;  ;("i" . ')
;;     ;;  ("j" . 'forward-word)
;;     ;;  ("k" . 'backward-word)
;;     ;;  ;("l" . 'next-line)
;;     ;;  ("m" . 'backward-paragraph)    
;;     ;;  ("n" . 'forward-paragraph) 
;;     ;;  ;("o" . 'keyboard-quit)
;;     ;;  ("p" . 'backward-forward-next-location)
;;     ;;  ("@" . 'backward-forward-previous-location)
;;     ;;  ("q" . 'indent-sexp)
;;     ;;  ("r" . 'backward-word)
;;     ;;  ;("s" . ')
;;     ;;  ("t" . 'keyboard-quit)
;;     ;;  ("u" . 'paredit-forward-up)
;;     ;;  ;("v" . 'previous-line)
;;     ;;  ;("w" . 'keyboard-quit)
;;     ;;  ;("x" . 'backward-char)
;;     ;;  ("y" . 'forward-word)
;;     ;; ;("z" . 'previous-line)
;;     ;; ; ("," . 'previous-line)
;;     ;; ; ("." . 'next-line)
;;     ;;  ("<up>" . 'backward-paragraph)
;;     ;;  ("<down>" . 'forward-paragraph)
;;     ("@" . 'er/expand-region)  
;;     ("`" . 'er/contract-region)
;;     ;;  ("<right>" . 'backward-forward-next-location)
;;     ;;  ("<left>" . 'backward-forward-previous-location)
;;     ))   





;;\C-q
(global-set-key "\C-q" nil)
(smartrep-define-key
    global-map "C-q"
  '(
    ("a" . 'all)
    ("b" . 'describe-bindings)
    ("c" . 'list-colors-display)
    ("d" . 'dash-at-point)
					;("e" . 'keyboard-quit)
					;("f" . 'backward-char)
					;("g" . 'goto-line)
    ("h" . 'hs-hide-block)
					;("i" . 'previous-line)
    ("j" . 'goto-line)
					;("k" . 'backward-char)
    ("l" . 'buffer-menu)
    ("m" . 'bm-toggle)    
					;("n" . 'previous-line)
    ("o" . 'multi-occur)
					;("p" . 'backward-char)
    ("q" . 'vr/query-replace)
    ("r" . 'anzu-query-replace-regexp)
    ("s" . 'my-string-inflection-cycle-auto)
					;("t" . 'backward-char)
					;("u" . 'next-line)
					;("v" . 'previous-line)
    ("w" . 'wdired-change-to-wdired-mode)
					;("x" . 'osx-browse-url-chrome)
					;("y" . 'next-line)
					;("z" . 'previous-line)
					;("i" . 'keyboard-quit)
    ("<right>" . 'goto-last-change)
    ("<left>" . 'goto-last-change)
    
    )) 


;; lisp key binds

					;M-left, M-rightをほとんど使わないので入れ替える
;; (define-key paredit-mode-map (kbd "C-<left>") 'left-word)
;; (define-key paredit-mode-map (kbd "C-<right>") 'right-word)
;; (define-key paredit-mode-map (kbd "M-<left>") 'paredit-forward-barf-sexp)
;; (define-key paredit-mode-map (kbd "M-<right>") 'paredit-forward-slurp-sexp)

(global-set-key "\C-t" nil)
(smartrep-define-key
    global-map "C-t"
  '(
    ("a" . 'beginning-of-defun)
    ("b" . 'paredit-backward)
					;("c" . 'next-line)
    ("d" . 'paredit-forward-down)
    ("e" . 'seq-end)
    ("f" . 'paredit-forward)
					;("g" . 'anything-do-grep)
					;("h" . 'next-line)
					;("i" . ')
    ("j" . 'forward-word)
    ("k" . 'backward-word)
					;("l" . 'next-line)
    ("m" . 'backward-paragraph)    
    ("n" . 'forward-paragraph) 
					;("o" . 'keyboard-quit)
    ("p" . 'backward-forward-next-location)
    ("@" . 'backward-forward-previous-location)
    ("q" . 'indent-sexp)
    ("r" . 'backward-word)
    ("s" . 'string-inflection-cycle)
    ("t" . 'keyboard-quit)
    ("u" . 'paredit-forward-up)
					;("v" . 'previous-line)
					;("w" . 'keyboard-quit)
					;("x" . 'backward-char)
    ("y" . 'forward-word)
					;("z" . 'previous-line)
					; ("," . 'previous-line)
					; ("." . 'next-line)
    ("<up>" . 'backward-paragraph)
    ("<down>" . 'forward-paragraph)
    ;; ("<right>" . 'paredit-forward-slurp-sexp)
    ;; ("<left>" . 'paredit-forward-barf-sexp)
    ("<right>" . 'backward-forward-next-location)
    ("<left>" . 'backward-forward-previous-location)
    
    ))   
